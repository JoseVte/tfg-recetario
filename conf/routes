# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.UserController.index()
# Routes API Rest
## Auth
POST    /auth/register              controllers.AuthController.register()
POST    /auth/login                 controllers.AuthController.login()
POST    /auth/logout                controllers.AuthController.logout()
POST    /auth/reset/password        controllers.AuthController.sendLostPasswordToken()
PUT     /auth/reset/password        controllers.AuthController.resetPassword()
PATCH   /auth/reset/password        controllers.AuthController.resetPassword()
### Profile
GET     /profile                    controllers.AuthController.profile()
PUT     /profile                    controllers.AuthController.updateProfile()
PATCH   /profile                    controllers.AuthController.updateProfile()

## Users
GET     /users                  controllers.UserController.list(page: Integer ?= 1, size: Integer ?= 3, search: String ?= "")
GET     /users/$id<[0-9]+>      controllers.UserController.get(id: Integer)
POST    /users                  controllers.UserController.create()
PUT     /users/$id<[0-9]+>      controllers.UserController.update(id: Integer)
PATCH   /users/$id<[0-9]+>      controllers.UserController.update(id: Integer)
DELETE  /users/$id<[0-9]+>      controllers.UserController.delete(id: Integer)

## Recipes
GET     /recipes                                controllers.RecipeController.list(page: Integer ?= 1, size: Integer ?= 3, search: String ?= "")
# This URI is not necessary, the recipes are identified by a slug
#GET    /recipes/$id<[0-9]+>                   controllers.RecipeController.get(id: Integer)
GET     /recipes/:slug                          controllers.RecipeController.get(slug: String)
POST    /recipes                                controllers.RecipeController.create()
POST    /recipes/draft                          controllers.RecipeController.getDraft()
POST    /recipes/create-from-draft              controllers.RecipeController.createFromDraft()
PUT     /recipes/$id<[0-9]+>                    controllers.RecipeController.update(id: Integer)
PATCH   /recipes/$id<[0-9]+>                    controllers.RecipeController.update(id: Integer)
DELETE  /recipes/$id<[0-9]+>                    controllers.RecipeController.delete(id: Integer)
HEAD    /recipes/:slug/check                    controllers.RecipeController.checkSlug(slug: String, id: Integer = null)
HEAD    /recipes/:slug/check/$id<[0-9]+>        controllers.RecipeController.checkSlug(slug: String, id: Integer)
HEAD    /recipes/:slug/mine                     controllers.RecipeController.isMine(slug: String)

## Ingredients
POST    /recipes/$id<[0-9]+>/ingredient                               controllers.RecipeController.addIngredient(id: Integer)
DELETE  /recipes/$id<[0-9]+>/ingredient/$ingredientId<[0-9]+>         controllers.RecipeController.deleteIngredient(id: Integer, ingredientId: Integer)

## Categories
GET      /categories             controllers.CategoryController.list()

## Tags
GET     /tags                    controllers.TagController.list(search: String ?= "")

## Favorite
PATCH   /recipes/$id<[0-9]+>/fav    controllers.RecipeController.toggleFav(id: Integer)

## Rating
PUT     /recipes/$id<[0-9]+>/rating     controllers.RecipeController.rating(id: Integer)

## User files
GET     /users/$idUser<[0-9]+>/files                  controllers.FileController.getUserFiles(idUser: Integer)
GET     /users/$idUser<[0-9]+>/files/$id<[0-9]+>      controllers.FileController.getById(idUser: Integer, id: Integer)
GET     /users/$idUser<[0-9]+>/files/*file            controllers.FileController.getByFile(idUser: Integer, file: String)
POST    /users/$idUser<[0-9]+>/files                  controllers.FileController.upload(idUser: Integer)
DELETE  /users/$idUser<[0-9]+>/files/$id<[0-9]+>      controllers.FileController.deleteById(idUser: Integer, id: Integer)
DELETE  /users/$idUser<[0-9]+>/files/*file            controllers.FileController.deleteByFile(idUser: Integer, file: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
